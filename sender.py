from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors import FloodWaitError, UserPrivacyRestrictedError, InviteHashExpiredError, InviteHashInvalidError
import time
import re

api_id =        
api_hash = ''    

client = TelegramClient('+37362051696', api_id, api_hash)

def parse_invite_link(link):
    """–ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç username –∏–ª–∏ —Ö—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (https://t.me/username)
    if link.startswith('https://t.me/'):
        parts = link.split('/')
        if len(parts) >= 4 and parts[3]:
            return parts[3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º username –±–µ–∑ @
    
    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ (https://t.me/+invitehash)
    if link.startswith('https://t.me/+'):
        return link.split('+')[1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    
    return None

async def join_chat(link):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ"""
    try:
        identifier = parse_invite_link(link)
        if not identifier:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏: {link}")
            return False

        # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        if not identifier.startswith('+'):
            await client(JoinChannelRequest(identifier))
            return True
        
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ö—ç—à–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        else:
            await client(ImportChatInviteRequest(identifier))
            return True
            
    except FloodWaitError as e:
        print(f"‚è± FloodWait –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏, —Å–ø–∏–º...")
        time.sleep(e.seconds)
        return False
    except (InviteHashExpiredError, InviteHashInvalidError):
        print(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ {link}: {e}")
        return False

async def main():
    await client.start()

    with open("template.txt", "r", encoding="utf-8") as f:
        template = f.read()

    with open("users.txt", "r", encoding="utf-8") as f:
        links = [line.strip() for line in f if line.strip()]

    for link in links:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª
            success = await join_chat(link)
            if not success:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
            identifier = parse_invite_link(link)
            if identifier.startswith('+'):
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ ID
                # (—ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±)
                print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {link}")
                continue
                
            entity = await client.get_entity(identifier)
            message = template.replace("{username}", identifier)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(entity, message)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {link}")
            time.sleep(50)

        except UserPrivacyRestrictedError:
            print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—á–∞—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–ª –õ–°: {link}")
        except FloodWaitError as e:
            print(f"‚è± FloodWait –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, —Å–ø–∏–º...")
            time.sleep(e.seconds)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å {link}: {e}")

    await client.disconnect()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())